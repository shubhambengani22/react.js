{"version":3,"sources":["logo.svg","axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","log","movieTrailer","name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.087549da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios'\n\n//To make axios requests to movie database\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n})\n\n//If it is a default import we don't need {} to call it, we can use any alias name\n//There can be only one default export in a file\nexport default instance\n","import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport './Row.css'\nimport YouTube from 'react-youtube'\nimport movieTrailer from 'movie-trailer'\n\nconst poster_baseUrl = 'https://image.tmdb.org/t/p/w500/'\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([])\n  const [trailerUrl, setTrailerUrl] = useState('')\n\n  useEffect(() => {\n    // If [], run once when the row loads and we don't run again\n    // If [param1, ...] it loads everytime the params change. params are called dependencies\n    // Since we are making a request to a third party service, we have to make sure we use async\n    async function fetchData() {\n      const request = await axios.get(fetchUrl)\n      setMovies(request.data.results)\n      return request\n    }\n    fetchData()\n  }, [fetchUrl]) // Whenever there is a variable which is pulled from outside and is crucial we have to include it in the [] because if that changes, new data is pulled in\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  }\n\n  const handleClick = (movie) => {\n    console.log(movie)\n    if (trailerUrl) {\n      setTrailerUrl('')\n    } else {\n      movieTrailer(movie?.name || movie?.original_title)\n        .then((url) => {\n          // https://www.youtube.com/watch?v=-cMqr9HpZ-Y\n          const urlParams = new URLSearchParams(new URL(url).search)\n          setTrailerUrl(urlParams.get('v'))\n        })\n        .catch((error) => console.log(error))\n    }\n  }\n\n  return (\n    <div className='row'>\n      <h2>{title}</h2>\n\n      <div className='row__posters'>\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n            src={`${poster_baseUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            } `}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  )\n}\n\nexport default Row\n","const API_KEY = '15e3df5ec19a642ff1428df16622e1a1'\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&include_null_first_air_dates=false&with_watch_monetization_types=flatrate`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=28&with_watch_monetization_types=flatrate`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=35&with_watch_monetization_types=flatrate`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=27&with_watch_monetization_types=flatrate`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=10749&with_watch_monetization_types=flatrate`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=99&with_watch_monetization_types=flatrate`,\n}\n\nexport default requests\n","import React, { useState, useEffect } from 'react'\nimport axios from './axios'\nimport requests from './requests'\nimport './Banner.css'\n\nfunction Banner() {\n  const [movie, setMovie] = useState([])\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals)\n      // Math.floor(Math.random() * request.data.results.length - 1) -> randomly selecting the element\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      )\n      return request\n    }\n    fetchData()\n  }, [])\n\n  console.log(movie)\n\n  // To truncate the text and replace the rest of it with ...\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str\n  }\n\n  return (\n    <header\n      className='banner'\n      style={{\n        backgroundSize: 'cover',\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: 'center center',\n      }}\n    >\n      <div className='banner__contents'>\n        <h1 className='banner__title'>\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className='banner__buttons'>\n          <button className='banner__button'>Play</button>\n          <button className='banner__button'>My List</button>\n        </div>\n        <h1 className='banner__description'>\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className='banner__fadebottom'></div>\n    </header>\n  )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport './Nav.css'\n\nfunction Nav() {\n  const [show, handleShow] = useState(false)\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      if (window.scrollY > 100) {\n        handleShow(true)\n      } else handleShow(false)\n    })\n    // This is to remove the listener in case useEffect fires multiple times to avoid multiple listeners\n    return () => {\n      window.removeEventListener('scroll')\n    }\n  }, [])\n\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n      <img\n        className='nav__logo'\n        src='https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg'\n        alt='Netflix Logo'\n      />\n      <img\n        className='nav__avatar'\n        src='https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'\n        alt='Netflix Avatar'\n      />\n    </div>\n  )\n}\n\nexport default Nav\n","import logo from './logo.svg'\nimport './App.css'\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className='App'>\n      {/* Navbar */}\n      <Nav />\n\n      {/* Banner */}\n      <Banner />\n\n      <Row\n        title='NETFLIX ORIGINALS'\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      ></Row>\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending}></Row>\n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated}></Row>\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies}></Row>\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies}></Row>\n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies}></Row>\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies}></Row>\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries}></Row>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}